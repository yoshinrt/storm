# generated by gcc for STORM
rs	equ	r5
rr	equ	r7

DataSize equ	64
	text
	
	# create random data
	
	movi	r0, 0xABCD
	movi	r3, 0x1021
	movi	r4, DataSize - 1;
	
	# r0 = random number
	shl	r0
	mov	r2, 0
	sbb	r2, 0
Init1:	dec	r4
	and	r2, r3
	xor	r0, r2
	mov	[r4 + 1], r0
	tst	r4
	jnz	Init1
	shl	r0	#slot
	mov	r2, 0	#slot
	sbb	r2, 0	#slot
	
	mov	r0, 0
	mov	r1, DataSize - 1
	call	_qsort
	
	# check sort status
	
	mov	r4, _iData
	movi	r7, DataSize
	mov	r0, [r4]
	
	mov	r1, [r4 + 1]
	inc	r4
	cmp	r0, r1
Check1:	jg	Error
	inc	r4		#slot
	mov	r0, r1		#slot
	cmp	r4, r7		#slot
	jnz	Check1
	mov	r1, [r4]
	nop
	cmp	r0, r1
	#succ
	mov	r0, 0
	hlt
	
Error:	mov	r0, 0xFF
	hlt


_qsort:
	add	r5, -6
	mov	[r5+0], r4
	mov	[r5+1], r6
	mov	[r5+2], r7
	mov	r6, r0		# r6 = iStart:r0
	mov	[r5+5], r1
__L23:
	mov	r3, r6		# r3 = i:r6
	mov	r2, [r5+5]	# r2 = iStop
	mov	r0, r6
	add	r0, r2
	sar	r0, r0		# r0 = ( i + j ) >> 1;
	cmp	r6, r2		# if( i:r6 >= j:r2 ) return;
	jge	__L5
	mov	r1, _iData
	add	r0, r1
	mov	r7, [r0]	# r7 = iData[ ( i + j ) >> 1 ];
	mov	r0, r6
	add	r0, 1		# ++i
	cmp	r0, r2		# if( i + 1 == j ) goto _L26
	jz	__L26
	mov	r0, r1
	add	r0, r6		# r0 = iData:r1 + i:r6
	add	r1, r2		# r1 = iData:r1 + j:r2
__L21:
	mov	r4, r3		# r4 = i:r3
	mov	r0, _iData
	jmp	__L28
	add	r4, r0		# r4 = iData:r0 + i:r4
__L14:
	add	r3, 1		# ++i:r3
	mov	r4, r3		# r4 = i:r3
	mov	r1, _iData	# r1 = iData
	add	r4, r1		# r4 = iData + i:r3
__L28:
	mov	r0, [r4]	# r0 = iData[ i ]
	cmp	r0, r7		# if( iData[ i ] < ikey ) continue while;
	jl	__L14
	nop	# slot
	nop	# slot
	mov	r1, r2		# r1 = j:r2
	jmp	__L31
	mov	r0, _iData	# r0 = iData
__L18:
	add	r2, -1		# --j:r2
	mov	r1, r2		# r1 = j:r2
	mov	r0, _iData	# r0 = iData
__L31:
	add	r1, r0		# r1 = j:r1 + iDara:r0
	mov	r0, [r1]	# r0 = iData[ j ]
	cmp	r0, r7		# if( iData[ j ] > iKey ) continue while
	jg	__L18
	nop	# slot
	nop	# slot
	cmp	r3, r2		# if( i:r3 >= j:r2 ) break;
	jge	__L10
	nop	# slot
	nop	# slot
	nop	# slot
	mov	r0, [r4]	# r0 = iData[ i ]
	mov	[r5+3], r0	# [r5+3] = iData[ i ]
	mov	r0, [r1]	# r0 = iData[ j ]
	add	r3, 1		# ++i:r3
	add	r2, -1		# --j:r2
	cmp	r3, r2		# if( i:r3 <= j:r2 ) continue while
	jle	__L21
	mov	[r4], r0
	mov	r0, [r5+3]
	mov	[r1], r0	# swap( iData[ i ], iData[ j ] )
__L10:
	cmp	r3, r2		# if( i:r3 == j:r2 ) goto L27
	jz	__L27
	nop	# slot
	nop	# slot
	nop	# slot
__L22:
	mov	r0, r6		# r0 = iStart
	mov	r1, r2		# r1 = j:r2
	mov	[r5+4], r3	# save i:r3
	call	_qsort		# qsort( iStart, j )
	mov	r3, [r5+4]	# restore i:r3
	jmp	__L23		# qsort( r6 = i, iStop )
	mov	r6, r3		# r6 = i:r3
__L27:
	add	r3, 1		# ++i:r3
	jmp	__L22
	add	r2, -1		# ++j:r2
__L26:
	mov	r3, [r0]	# r3 = iData[ i ]
	mov	r2, [r1]	# r2 = iData[ j ]
	cmp	r3, r2		# if( iData[ i ] > iData[ j ] )
	jle	__L5
	nop	# slot
	nop	# slot
	nop	# slot
	mov	[r0], r2	# swap( iData[ i ], iData[ j ] )
	mov	[r1], r3
__L5:
	mov	r7, [r5+2]
	mov	r6, [r5+1]
	mov	r4, [r5+0]
	ret
	sub	r5, -6
#_main:
	mov	r3, 0
	mov	r2, [_r__0]
__L36:
	mov	r1, r3
	mov	r0, _iData
	add	r1, r0
	shl	r0, r2
	add	r0, r2
	shl	r0, r0
	add	r3, 1
	cmp	r3, 100
	jl	__L36
	add	r2, r0
	add	r2, 1
	mov	[r1], r2
	mov	[_r__0], r2
	mov	r0, 0
	mov	r1, 99
	call	_qsort
	mov	r3, 0
	mov	r0, r3
	mov	r1, _iData
	add	r0, r1
__L48:
	mov	r0, [r0]
	#out	0, r0; in	rz, 0
	add	r3, 1
	cmp	r3, 100
	jl	__L48
	mov	r0, r3
	mov	r1, _iData
	add	r0, r1
	hlt
	data
_iData:
	skip	256
_r__0:
	db	0xffffabcd

# register usage report:
# MaxReg:8 FuncArg:4 CalleeSave:4
# used :11111011
# call :11110100
